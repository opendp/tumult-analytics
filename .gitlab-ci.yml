workflow:
  rules:
    # Don't create pipelines on push for any branches other than the default
    # branch -- if such pipelines are needed, they will be triggered from
    # elsewhere. Also, don't run dev pipelines in staging repos.
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'
      when: never
    - if: '$CI_PROJECT_NAME != "analytics" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: never
    - when: always

# Define the potential stages that can be run in a GitLab CI pipeline job
stages:
  - setup
  - lint
  - test
  - benchmark
  - test-release
  - release
  - handler

include: ".ci/common.yml"

# "Fake" job to prevent dev pipelines from being interrupted on new commits.
# See gitlab-org/gitlab#34221
prevent_dev_interrupt:
  stage: setup
  script:
    - echo "No-op job to prevent dev pipelines from being interrupted"
  variables:
    GIT_STRATEGY: none
  timeout: 1m
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"

package:
  extends: .base
  stage: setup
  needs: []
  image: registry.gitlab.com/tumult-labs/ops/ci/linux:python3.10
  script:
    - nox -s build
  artifacts:
    paths: ["dist/"]
  timeout: 10m
  interruptible: true
  tags: [aws-small]

lint:
  extends: .base
  stage: lint
  needs: ["package"]
  script:
    - nox -t lint -- --check
  timeout: 20m
  rules:
    - if: '$NIGHTLY == "true"'
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger" || $PARENT_PIPELINE_ID'
      when: never
    - when: on_success

sanity_checks:
  extends: .base
  stage: lint
  needs: ["package"]
  script:
    - nox -t sanity-checks
  timeout: 20m
  rules:
    - if: '$NIGHTLY == "true"'
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: '$CI_PIPELINE_SOURCE == "trigger" || $PARENT_PIPELINE_ID'
      when: never
    - when: on_success

test:
  extends: .base
  stage: test
  needs: ["package"]
  script:
    # Run doctest before test_fast so that it doesn't overwrite the coverage
    # report from test_fast.
    - nox -s test_smoketest test_fast
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    paths: ["coverage/"]
    reports:
      coverage_report:
        coverage_format: cobertura
        path: "coverage.xml"
      junit: "junit*.xml"
    expose_as: "Coverage"
  timeout: 1h
  rules:
    - if: '$NIGHTLY == "true"'
      when: never
    - if: '$CI_COMMIT_TAG || $PARENT_PIPELINE_ID'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - when: manual
      allow_failure: true
  tags: [aws-c6a.xlarge]


test_demos:
  extends: test
  script:
    - nox -s test_demos
  coverage: null
  artifacts: null

test_slow:
  extends: test
  script:
    - nox -s test_slow
  timeout: 1h
  tags: [aws-m6a.2xlarge]
  rules:
    - if: '$NIGHTLY == "true"'
    - if: '$CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "trigger" || $PARENT_PIPELINE_ID'
      when: never
    - when: manual
      allow_failure: true

test_dep_matrix:
  extends: .base
  stage: test
  needs: ["package"]
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.10", "3.11", "3.12"]
        TEST_TYPE: ["oldest", "newest"]
      - PYTHON_VERSION: ["3.10"]
        TEST_TYPE: ["pyspark3.4"]
  image: registry.gitlab.com/tumult-labs/ops/ci/linux:python${PYTHON_VERSION}
  rules:
    - if: '$NIGHTLY == "true"'
    - if: '$CI_COMMIT_TAG || $CI_PIPELINE_SOURCE == "trigger" || $PARENT_PIPELINE_ID'
      when: never
    - when: manual
      allow_failure: true
  script:
    - nox -s "test_dependency_matrix(${PYTHON_VERSION}-${TEST_TYPE})"
  cache:
    - key:
        prefix: "$PYTHON_VERSION-$TEST_TYPE"
        files: ["poetry.lock"]
      paths: [".cache/pip"]
  timeout: 3h
  tags: [aws-c6a.xlarge]
  interruptible: true


benchmark_nightly:
  extends: .base
  stage: benchmark
  needs: ["package"]
  script:
    - nox -s benchmark
  artifacts:
    paths:
      - benchmark_output/
    expose_as: "Benchmarks"
  timeout: 3h
  rules:
    - if: '$NIGHTLY == "true"'
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: manual
      allow_failure: true
  tags: [aws-c6a.xlarge]

benchmark_dependency_matrix:
  extends: .base
  stage: benchmark
  needs: ["package"]
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.10", "3.11", "3.12"]
        TEST_TYPE: ["oldest", "newest"]
  image: registry.gitlab.com/tumult-labs/ops/ci/linux:python${PYTHON_VERSION}
  script:
    - nox -s "benchmark_dependency_matrix(${PYTHON_VERSION}-${TEST_TYPE})"
  artifacts:
    paths:
      - benchmark_output/
    expose_as: "Benchmarks"
  timeout: 3h
  rules: # Can only be triggered manually
    - if: "$CI_COMMIT_TAG"
      when: never
    - when: manual
      allow_failure: true
  tags: [aws-c6a.xlarge]

test_release_linux:
  extends: .base
  stage: test-release
  needs: ["package"]
  parallel:
    matrix: # 3.10, 3.11, and 3.12 run out of memory on a c6a.xlarge.
      - PYTHON_VERSION: ["3.10"]
        INSTANCE: aws-c6a.xlarge
      - PYTHON_VERSION: ["3.10", "3.11", "3.12"]
        INSTANCE: aws-m6a.2xlarge
  image: registry.gitlab.com/tumult-labs/ops/ci/linux:python${PYTHON_VERSION}
  script:
    - nox -s release_smoketest release_test
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: "coverage.xml"
      junit: "junit*.xml"
  timeout: 1h
  rules:
    - if: '$NIGHTLY == "true"'
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_PIPELINE_SOURCE == "trigger" || $PARENT_PIPELINE_ID'
      when: never
    - when: manual
      allow_failure: true
  tags: 
    - ${INSTANCE}

audit:
  extends: .base
  stage: test-release
  needs: ["package"]
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.10", "3.11", "3.12"]
  image: registry.gitlab.com/tumult-labs/ops/ci/linux:python${PYTHON_VERSION}
  script:
    - nox -s "audit(python=\"${PYTHON_VERSION}\")"
  timeout: 10m
  rules:
    - if: '$NIGHTLY == "true"'
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_PIPELINE_SOURCE == "trigger" || $PARENT_PIPELINE_ID'
      when: never
    - when: manual
      allow_failure: true

publish:
  stage: release
  dependencies: [package]
  image: registry.gitlab.com/tumult-labs/ops/ci/ci-full:latest
  variables:
    POETRY_USER: "__token__"
    POETRY_PASSWORD: "${RELEASE_PYPI_TOKEN}"
    POETRY_PUBLISH: "poetry publish"
  script:
    - $POETRY_PUBLISH -u "$POETRY_USER" -p "$POETRY_PASSWORD"
  timeout: 3m
  rules:
    - if: '$CI_COMMIT_TAG'
  interruptible: false


# Requires the following CI variables to be set:
# * RELEASE_SLACK_WEBHOOK_URL, a Slack incoming webhook for posting to the appropriate
#   channel
release_handler:
  stage: handler
  script:
    - source .ci/pipeline-handlers.bash
    - release_handler
  timeout: 2m
  rules:
    - if: '$CI_COMMIT_TAG'
  interruptible: false
